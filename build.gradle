plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Compatibility
    /* Modmenu */
    modCompileOnly "maven.modrinth:modmenu:${project.modmenu_version}"
    modRuntimeOnly "maven.modrinth:modmenu:${project.modmenu_version}"

    /* BetterF3 */
    modCompileOnly "maven.modrinth:betterf3:${project.betterf3_version}"
    modRuntimeOnly "maven.modrinth:betterf3:${project.betterf3_version}"

    /* Xaero's World Map */
    modCompileOnly "maven.modrinth:xaeros-world-map:${project.xaeroworldmap_version}"
    modRuntimeOnly "maven.modrinth:xaeros-world-map:${project.xaeroworldmap_version}"

    /* Xaero's Minimap */
    modCompileOnly "maven.modrinth:xaeros-minimap:${project.xaerominimap_version}"
    //modCompileOnly "maven.modrinth:xaeros-minimap:${project.old_xaerominimap_version}"
    modRuntimeOnly "maven.modrinth:xaeros-minimap:${project.old_xaerominimap_version}"

    /* Xaero's Minimap (Fair Play) */
    //modCompileOnly "maven.modrinth:xaeros-minimap-fair:${project.xaerominimapfair_version}"
    //modRuntimeOnly "maven.modrinth:xaeros-minimap-fair:${project.xaerominimapfair_version}"

    /* Open Parties and Claims & dependencies */
    compileOnly "com.electronwill.night-config:core:${project.nightconfig_version}"
    runtimeOnly "com.electronwill.night-config:core:${project.nightconfig_version}"
    compileOnly "com.electronwill.night-config:toml:${project.nightconfig_version}"
    runtimeOnly "com.electronwill.night-config:toml:${project.nightconfig_version}"
    modCompileOnly "maven.modrinth:forge-config-api-port:${project.forgeconfigapiport_version}"
    modRuntimeOnly "maven.modrinth:forge-config-api-port:${project.forgeconfigapiport_version}"
    modCompileOnly "maven.modrinth:open-parties-and-claims:${project.openpartiesandclaims_version}"
    modRuntimeOnly "maven.modrinth:open-parties-and-claims:${project.openpartiesandclaims_version}"

    /* Sodium */
    modCompileOnly "maven.modrinth:sodium:${project.sodium_version}"
    modRuntimeOnly "maven.modrinth:sodium:${project.sodium_version}"

    /* Sodium Extra & dependencies */
    modCompileOnly "net.caffeinemc:CaffeineConfig:${project.caffeineconfig_version}"
    modRuntimeOnly "net.caffeinemc:CaffeineConfig:${project.caffeineconfig_version}"
    modCompileOnly "maven.modrinth:sodium-extra:${project.sodium_extra_version}"
    modRuntimeOnly "maven.modrinth:sodium-extra:${project.sodium_extra_version}"

    /* Reese's Sodium Options */
    modCompileOnly "maven.modrinth:reeses-sodium-options:${project.reeses_sodium_options_version}"
    modRuntimeOnly "maven.modrinth:reeses-sodium-options:${project.reeses_sodium_options_version}"

    /* Litematica & dependencies */
    modCompileOnly "maven.modrinth:malilib:${project.malilib_version}"
    modRuntimeOnly "maven.modrinth:malilib:${project.malilib_version}"
    modCompileOnly "maven.modrinth:litematica:${project.litematica_version}"
    modRuntimeOnly "maven.modrinth:litematica:${project.litematica_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
